# Platform-specific functionality.

# Hack to remove -rdynamic from CFLAGS and CXXFLAGS
# See http://public.kitware.com/pipermail/cmake/2006-July/010404.html
IF(CMAKE_SYSTEM_NAME STREQUAL "Linux")
	SET(CMAKE_SHARED_LIBRARY_LINK_C_FLAGS)
	SET(CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS)
ENDIF()

# Don't embed rpaths in the executables.
SET(CMAKE_SKIP_RPATH ON)

# Compiler flag modules.
INCLUDE(CheckCCompilerFlag)
INCLUDE(CheckCXXCompilerFlag)

# Check what flag is needed for C99 support.
INCLUDE(CheckC99CompilerFlag)
CHECK_C99_COMPILER_FLAG(MCRECOVER_C99_CFLAG)

# Check what flag is needed for C++ 2011 support.
INCLUDE(CheckCXX11CompilerFlag)
CHECK_CXX11_COMPILER_FLAG(MCRECOVER_CXX11_CXXFLAG)

# Disable C++ RTTI.
INCLUDE(CheckCXXNoRTTICompilerFlag)
CHECK_CXX_NO_RTTI_COMPILER_FLAG(MCRECOVER_CXX_NO_RTTI_CXXFLAG)

# Disable C++ exceptions.
INCLUDE(CheckCXXNoExceptionsCompilerFlag)
CHECK_CXX_NO_EXCEPTIONS_COMPILER_FLAG(MCRECOVER_CXX_NO_EXCEPTIONS_CXXFLAG)

# Check for link-time optimization.
# NOTE: LTO on MinGW is broken right now:
# `___mingw_raise_matherr' referenced in section `.text' of
# ../lib/libmingwex.a(lib32_libmingwex_a-log.o): defined in
# discarded section `.text' of lib32_libmingw32_a-merr.o (symbol from plugin)
IF(ENABLE_LTO)
	CHECK_C_COMPILER_FLAG("-flto" CFLAG_LTO)
	IF(CFLAG_LTO)
		SET(MCRECOVER_CFLAGS_LTO "-flto")
		IF(MINGW)
			# MinGW. Disable LTO partitioning, since it
			# causes problems with Qt.
			# Reference: http://sourceware.org/bugzilla/show_bug.cgi?id=12762
			CHECK_C_COMPILER_FLAG("-flto-partition=none" CFLAG_LTO_PARTITION)
			IF(CFLAG_LTO_PARTITION)
				SET(MCRECOVER_CFLAGS_LTO "${MCRECOVER_CFLAGS_LTO} -flto-partition=none")
			ENDIF(CFLAG_LTO_PARTITION)
			UNSET(CFLAG_LTO_PARTITION)
		ENDIF(MINGW)
		SET(MCRECOVER_LDFLAGS_LTO "${MCRECOVER_CFLAGS_LTO} -fuse-linker-plugin")
	ENDIF(CFLAG_LTO)
	UNSET(CFLAG_LTO)
ENDIF(ENABLE_LTO)

# Test for common CFLAGS and CXXFLAGS.
SET(MCRECOVER_CFLAGS_COMMON "")
SET(MCRECOVER_CXXFLAGS_COMMON "${MCRECOVER_CXX_NO_RTTI_CFLAG} ${MCRECOVER_CXX_NO_EXCEPTIONS_CFLAG}")
FOREACH(FLAG_TEST "-Wall" "-Wextra" "-fstrict-aliasing")
	CHECK_C_COMPILER_FLAG("${FLAG_TEST}" CFLAG_${FLAG_TEST})
	IF(CFLAG_${FLAG_TEST})
		SET(MCRECOVER_CFLAGS_COMMON "${MCRECOVER_CFLAGS_COMMON} ${FLAG_TEST}")
	ENDIF(CFLAG_${FLAG_TEST})
	UNSET(CFLAG_${FLAG_TEST})
	
	CHECK_CXX_COMPILER_FLAG("${FLAG_TEST}" CXXFLAG_${FLAG_TEST})
	IF(CXXFLAG_${FLAG_TEST})
		SET(MCRECOVER_CXXFLAGS_COMMON "${MCRECOVER_CXXFLAGS_COMMON} ${FLAG_TEST}")
	ENDIF(CXXFLAG_${FLAG_TEST})
	UNSET(CXXFLAG_${FLAG_TEST})
ENDFOREACH()

# Test for common LDFLAGS.
# TODO: Doesn't work on OS X. (which means it's not really testing it!)
SET(MCRECOVER_LDFLAGS_COMMON "")
IF(NOT APPLE)
	FOREACH(FLAG_TEST "-Wl,-O1" "-Wl,--sort-common" "-Wl,--as-needed")
		CHECK_C_COMPILER_FLAG("${FLAG_TEST}" LDFLAG_${FLAG_TEST})
		IF(LDFLAG_${FLAG_TEST})
			SET(MCRECOVER_LDFLAGS_COMMON "${MCRECOVER_LDFLAGS_COMMON} ${FLAG_TEST}")
		ENDIF(LDFLAG_${FLAG_TEST})
		UNSET(LDFLAG_${FLAG_TEST})
	ENDFOREACH()
ENDIF(NOT APPLE)

# Platform-specific configuration.
SET(MCRECOVER_CFLAGS_PLATFORM "")
SET(MCRECOVER_CXXFLAGS_PLATFORM "")
SET(MCRECOVER_LDFLAGS_PLATFORM "")
IF(WIN32)
	INCLUDE(cmake/platform/win32.cmake)
ENDIF(WIN32)

# Common CFLAGS/CXXFLAGS for each configuration.
SET(MCRECOVER_CFLAGS_CONFIG_COMMON	"${MCRECOVER_C99_CFLAG} ${MCRECOVER_CFLAGS_COMMON} ${MCRECOVER_CFLAGS_PLATFORM}")
SET(MCRECOVER_CXXFLAGS_CONFIG_COMMON	"${MCRECOVER_CXX11_CXXFLAG} ${MCRECOVER_CXXFLAGS_COMMON} ${MCRECOVER_CXXFLAGS_PLATFORM}")
SET(MCRECOVER_LDFLAGS_CONFIG_COMMON	"${MCRECOVER_LDFLAGS_COMMON} ${MCRECOVER_LDFLAGS_PLATFORM}")

# Set CFLAGS/CXXFLAGS based on build type.
SET(CMAKE_C_FLAGS_DEBUG			"-O0 -DDEBUG -ggdb ${MCRECOVER_CFLAGS_CONFIG_COMMON}")
SET(CMAKE_CXX_FLAGS_DEBUG		"-O0 -DDEBUG -ggdb ${MCRECOVER_CXXFLAGS_CONFIG_COMMON}")
SET(CMAKE_C_FLAGS_RELEASE		"-O2 -DNDEBUG -ggdb ${MCRECOVER_CFLAGS_LTO} ${MCRECOVER_CFLAGS_CONFIG_COMMON}")
SET(CMAKE_CXX_FLAGS_RELEASE		"-O2 -DNDEBUG -ggdb ${MCRECOVER_CFLAGS_LTO} ${MCRECOVER_CXXFLAGS_CONFIG_COMMON}")
SET(CMAKE_EXE_LINKER_FLAGS_DEBUG	"${MCRECOVER_LDFLAGS_CONFIG_COMMON}")
SET(CMAKE_EXE_LINKER_FLAGS_RELEASE	"${MCRECOVER_LDFLAGS_CONFIG_COMMON} ${MCRECOVER_LDFLAGS_LTO}")

# Unset the temporary variables.
UNSET(MCRECOVER_C99_CFLAG)
UNSET(MCRECOVER_CXX11_COMPAT_HEADER)
UNSET(MCRECOVER_CXX11_CXXFLAG)
UNSET(MCRECOVER_CFLAGS_COMMON)
UNSET(MCRECOVER_CFLAGS_PLATFORM)
UNSET(MCRECOVER_LDFLAGS_COMMON)
UNSET(MCRECOVER_LDFLAGS_PLATFORM)
UNSET(MCRECOVER_CFLAGS_CONFIG_COMMON)
UNSET(MCRECOVER_CXXFLAGS_CONFIG_COMMON)
