# Platform-specific functionality.

# Hack to remove -rdynamic from CFLAGS and CXXFLAGS
# See http://public.kitware.com/pipermail/cmake/2006-July/010404.html
IF(CMAKE_SYSTEM_NAME STREQUAL "Linux")
	SET(CMAKE_SHARED_LIBRARY_LINK_C_FLAGS)
	SET(CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS)
ENDIF()

# Don't embed rpaths in the executables.
SET(CMAKE_SKIP_RPATH ON)

# Common flag variables:
# [common]
# - MCRECOVER_C_FLAGS_COMMON
# - MCRECOVER_CXX_FLAGS_COMMON
# - MCRECOVER_EXE_LINKER_FLAGS_COMMON
# - MCRECOVER_SHARED_LINKER_FLAGS_COMMON
# [debug]
# - MCRECOVER_C_FLAGS_DEBUG
# - MCRECOVER_CXX_FLAGS_DEBUG
# - MCRECOVER_EXE_LINKER_FLAGS_DEBUG
# - MCRECOVER_SHARED_LINKER_FLAGS_DEBUG
# [release]
# - MCRECOVER_C_FLAGS_RELEASE
# - MCRECOVER_CXX_FLAGS_RELEASE
# - MCRECOVER_EXE_LINKER_FLAGS_RELEASE
# - MCRECOVER_SHARED_LINKER_FLAGS_RELEASE
#
# DEBUG and RELEASE variables do *not* include COMMON.
IF(MSVC)
	INCLUDE(cmake/platform/msvc.cmake)
ELSE(MSVC)
	INCLUDE(cmake/platform/gcc.cmake)
ENDIF(MSVC)

# Platform-specific configuration.
IF(WIN32)
	INCLUDE(cmake/platform/win32.cmake)
ENDIF(WIN32)

# Set CMAKE flags.
# TODO: RelWithDebInfo / MinSizeRel?
# Common
SET(CMAKE_C_FLAGS			"${CMAKE_C_FLAGS} ${MCRECOVER_C_FLAGS_COMMON}")
SET(CMAKE_CXX_FLAGS			"${CMAKE_CXX_FLAGS} ${MCRECOVER_CXX_FLAGS_COMMON}")
SET(CMAKE_EXE_LINKER_FLAGS		"${CMAKE_EXE_LINKER_FLAGS} ${MCRECOVER_EXE_LINKER_FLAGS_COMMON}")
SET(CMAKE_SHARED_LINKER_FLAGS		"${CMAKE_SHARED_LINKER_FLAGS} ${MCRECOVER_SHARED_LINKER_FLAGS_COMMON}")
SET(CMAKE_MODULE_LINKER_FLAGS		"${CMAKE_MODULE_LINKER_FLAGS} ${MCRECOVER_MODULE_LINKER_FLAGS_COMMON}")
# Debug
SET(CMAKE_C_FLAGS_DEBUG			"${CMAKE_C_FLAGS_DEBUG} ${MCRECOVER_C_FLAGS_DEBUG}")
SET(CMAKE_CXX_FLAGS_DEBUG		"${CMAKE_CXX_FLAGS_DEBUG} ${MCRECOVER_CXX_FLAGS_DEBUG}")
SET(CMAKE_EXE_LINKER_FLAGS_DEBUG	"${CMAKE_EXE_LINKER_FLAGS_DEBUG} ${MCRECOVER_EXE_LINKER_FLAGS_DEBUG}")
SET(CMAKE_SHARED_LINKER_FLAGS_DEBUG	"${CMAKE_SHARED_LINKER_FLAGS_DEBUG} ${MCRECOVER_SHARED_LINKER_FLAGS_DEBUG}")
SET(CMAKE_MODULE_LINKER_FLAGS_DEBUG	"${CMAKE_MODULE_LINKER_FLAGS_DEBUG} ${MCRECOVER_MODULE_LINKER_FLAGS_DEBUG}")
# Release
SET(CMAKE_C_FLAGS_RELEASE		"${CMAKE_C_FLAGS_RELEASE} ${MCRECOVER_C_FLAGS_RELEASE}")
SET(CMAKE_CXX_FLAGS_RELEASE		"${CMAKE_CXX_FLAGS_RELEASE} ${MCRECOVER_CXX_FLAGS_RELEASE}")
SET(CMAKE_EXE_LINKER_FLAGS_RELEASE	"${CMAKE_EXE_LINKER_FLAGS_RELEASE} ${MCRECOVER_EXE_LINKER_FLAGS_RELEASE}")
SET(CMAKE_SHARED_LINKER_FLAGS_RELEASE	"${CMAKE_SHARED_LINKER_FLAGS_RELEASE} ${MCRECOVER_SHARED_LINKER_FLAGS_RELEASE}")
SET(CMAKE_MODULE_LINKER_FLAGS_RELEASE	"${CMAKE_MODULE_LINKER_FLAGS_RELEASE} ${MCRECOVER_MODULE_LINKER_FLAGS_RELEASE}")

# Unset temporary variables.
# Common
UNSET(MCRECOVER_C_FLAGS_COMMON)
UNSET(MCRECOVER_CXX_FLAGS_COMMON)
UNSET(MCRECOVER_EXE_LINKER_FLAGS_COMMON)
UNSET(MCRECOVER_SHARED_LINKER_FLAGS_COMMON)
UNSET(MCRECOVER_MODULE_LINKER_FLAGS_COMMON)
# Debug
UNSET(MCRECOVER_C_FLAGS_DEBUG)
UNSET(MCRECOVER_CXX_FLAGS_DEBUG)
UNSET(MCRECOVER_EXE_LINKER_FLAGS_DEBUG)
UNSET(MCRECOVER_SHARED_LINKER_FLAGS_DEBUG)
UNSET(MCRECOVER_MODULE_LINKER_FLAGS_DEBUG)
# Release
UNSET(MCRECOVER_C_FLAGS_RELEASE)
UNSET(MCRECOVER_CXX_FLAGS_RELEASE)
UNSET(MCRECOVER_EXE_LINKER_FLAGS_RELEASE)
UNSET(MCRECOVER_SHARED_LINKER_FLAGS_RELEASE)
UNSET(MCRECOVER_MODULE_LINKER_FLAGS_RELEASE)

###### Windows-specific CMake functions. ######

# Set Windows subsystem when building with MSVC.
FUNCTION(SET_WINDOWS_SUBSYSTEM _target _subsystem)
IF(WIN32 AND MSVC)
	GET_TARGET_PROPERTY(TARGET_LINK_FLAGS ${_target} LINK_FLAGS)
	IF(TARGET_LINK_FLAGS)
		SET(TARGET_LINK_FLAGS "${TARGET_LINK_FLAGS} ${MCRECOVER_LINKER_FLAGS_${_subsystem}_EXE}")
	ELSE()
		SET(TARGET_LINK_FLAGS "${MCRECOVER_LINKER_FLAGS_${_subsystem}_EXE}")
	ENDIF()
	SET_TARGET_PROPERTIES(${_target} PROPERTIES LINK_FLAGS "${TARGET_LINK_FLAGS}")
ENDIF(WIN32 AND MSVC)
ENDFUNCTION()

# Disable automatic manifest generation when building with MSVC.
# Only use this if you have a custom manifest specified in the resource script.
FUNCTION(SET_WINDOWS_NO_MANIFEST _target)
IF(WIN32 AND MSVC)
	GET_TARGET_PROPERTY(TARGET_LINK_FLAGS ${_target} LINK_FLAGS)
	IF(TARGET_LINK_FLAGS)
		SET(TARGET_LINK_FLAGS "${TARGET_LINK_FLAGS} /MANIFEST:NO")
	ELSE()
		SET(TARGET_LINK_FLAGS "/MANIFEST:NO")
	ENDIF()
	SET_TARGET_PROPERTIES(${_target} PROPERTIES LINK_FLAGS "${TARGET_LINK_FLAGS}")
ENDIF(WIN32 AND MSVC)
ENDFUNCTION()
