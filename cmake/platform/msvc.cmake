# Microsoft Visual C++
IF(MSVC_VERSION LESS 1600)
	MESSAGE(FATAL_ERROR "MSVC 2010 (10.0) or later is required.")
ENDIF()

# CMake has a bunch of defaults, including /Od for debug and /O2 for release.
# Remove some default CFLAGS/CXXFLAGS.
STRING(REPLACE "/GR" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
STRING(REPLACE "/EHsc" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")

# Disable useless warnings:
# - MSVC "logo" messages
# - C4355: 'this' used in base member initializer list (used for Qt Dpointer pattern)
# - MSVCRT "deprecated" functions
SET(MCRECOVER_C_FLAGS_COMMON "/nologo /wd4355 -D_CRT_SECURE_NO_WARNINGS -D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE")
SET(MCRECOVER_CXX_FLAGS_COMMON "${MCRECOVER_C_FLAGS_COMMON}")
# NOTE: -tsaware is automatically set for Windows 2000 and later. (as of at least Visual Studio .NET 2003)
SET(MCRECOVER_EXE_LINKER_FLAGS_COMMON "/NOLOGO /DYNAMICBASE /NXCOMPAT /LARGEADDRESSAWARE")
SET(MCRECOVER_SHARED_LINKER_FLAGS_COMMON "${MCRECOVER_EXE_LINKER_FLAGS_COMMON}")
SET(MCRECOVER_MODULE_LINKER_FLAGS_COMMON "${MCRECOVER_EXE_LINKER_FLAGS_COMMON}")

# Disable C++ RTTI and asynchronous exceptions.
SET(MCRECOVER_CXX_FLAGS_COMMON "${MCRECOVER_CXX_FLAGS_COMMON} -GR- -EHsc")

# Test for "/sdl".
INCLUDE(CheckCCompilerFlag)
FOREACH(FLAG_TEST "-sdl")
	CHECK_C_COMPILER_FLAG("${FLAG_TEST}" CFLAG_${FLAG_TEST})
	IF(CFLAG_${FLAG_TEST})
		SET(MCRECOVER_C_FLAGS_COMMON "${MCRECOVER_C_FLAGS_COMMON} ${FLAG_TEST}")
		SET(MCRECOVER_CXX_FLAGS_COMMON "${MCRECOVER_CXX_FLAGS_COMMON} ${FLAG_TEST}")
	ENDIF(CFLAG_${FLAG_TEST})
	UNSET(CFLAG_${FLAG_TEST})
ENDFOREACH()

# Disable the RC and MASM "logo".
# FIXME: Setting CMAKE_RC_FLAGS causes msbuild to fail,
# since CMake already sets /NOLOGO there.
# - Also disabling /NOLOGO for MASM just in case.
#SET(CMAKE_RC_FLAGS "/NOLOGO")
#SET(CMAKE_ASM_MASM_FLAGS "/NOLOGO")

# FIXME: MSVC 2015's 32-bit masm has problems when using msbuild:
# - The default /W3 fails for seemingly no reason. /W0 fixes it.
# - Compilation fails due to no SAFESEH handlers in inffas32.asm.
# NOTE: We're enabling these for all MSVC platforms, not just 32-bit.
# NOTE 2: We need to cache this in order to prevent random build failures
# caused by an empty string being cached instead.
SET(CMAKE_ASM_MASM_FLAGS "/W0 /safeseh" CACHE STRING
	"Flags used by the assembler during all build types.")

# Check for link-time optimization.
IF(ENABLE_LTO)
	SET(MCRECOVER_C_FLAGS_COMMON "${MCRECOVER_C_FLAGS_COMMON} /GL")
	SET(MCRECOVER_CXX_FLAGS_COMMON "${MCRECOVER_CXX_FLAGS_COMMON} /GL")
	SET(MCRECOVER_EXE_LINKER_FLAGS_COMMON "${MCRECOVER_EXE_LINKER_FLAGS_COMMON} /LTCG")
	SET(MCRECOVER_SHARED_LINKER_FLAGS_COMMON "${MCRECOVER_SHARED_LINKER_FLAGS_COMMON} /LTCG")
	SET(MCRECOVER_MODULE_LINKER_FLAGS_COMMON "${MCRECOVER_MODULE_LINKER_FLAGS_COMMON} /LTCG")
ENDIF(ENABLE_LTO)

# Check if CMAKE_SIZEOF_VOID_P is set correctly.
IF(NOT CMAKE_SIZEOF_VOID_P)
	# CMAKE_SIZEOF_VOID_P isn't set.
	# Set it based on CMAKE_CL_64.
	IF(CMAKE_CL_64)
		SET(CMAKE_SIZEOF_VOID_P 8)
	ELSE(CMAKE_CL_64)
		SET(CMAKE_SIZEOF_VOID_P 4)
	ENDIF(CMAKE_CL_64)
ENDIF(NOT CMAKE_SIZEOF_VOID_P)

# Debug/release flags.
SET(MCRECOVER_C_FLAGS_DEBUG			"-Zi")
SET(MCRECOVER_CXX_FLAGS_DEBUG			"-Zi")
SET(MCRECOVER_EXE_LINKER_FLAGS_DEBUG		"/DEBUG /INCREMENTAL")
SET(MCRECOVER_SHARED_LINKER_FLAGS_DEBUG		"${MCRECOVER_EXE_LINKER_FLAGS_DEBUG}")
SET(MCRECOVER_MODULE_LINKER_FLAGS_DEBUG		"${MCRECOVER_EXE_LINKER_FLAGS_DEBUG}")
SET(MCRECOVER_C_FLAGS_RELEASE			"-Zi")
SET(MCRECOVER_CXX_FLAGS_RELEASE			"-Zi")
SET(MCRECOVER_EXE_LINKER_FLAGS_RELEASE		"/DEBUG /INCREMENTAL:NO /OPT:ICF,REF")
SET(MCRECOVER_SHARED_LINKER_FLAGS_RELEASE	"${MCRECOVER_EXE_LINKER_FLAGS_RELEASE}")
SET(MCRECOVER_MODULE_LINKER_FLAGS_RELEASE	"${MCRECOVER_EXE_LINKER_FLAGS_RELEASE}")
