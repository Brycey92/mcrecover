# Check for PCRE.
# If PCRE isn't found, extlib/pcre/ will be used instead.
IF(NOT HAVE_PCRE)

IF(WIN32)
	MESSAGE(STATUS "Win32: using internal PCRE")
ELSEIF(USE_INTERNAL_PCRE)
	MESSAGE(STATUS "Using internal PCRE")
ELSE()
	FIND_PACKAGE(PCRE)
	IF(NOT PCRE_FOUND)
		MESSAGE(STATUS "PCRE not found; using internal PCRE")
	ENDIF(NOT PCRE_FOUND)

	# Search for pcre16.
	FIND_LIBRARY(PCRE_PCRE16_LIBRARY NAMES pcre16 HINTS ${PC_PCRE_LIBDIR} ${PC_PCRE_LIBRARY_DIRS})
	IF(PCRE_PCRE16_LIBRARY)
		MESSAGE(STATUS "found libpcre16, version ${PC_PCRE_VERSION}")
		SET(HAVE_PCRE16 1)
	ENDIF(PCRE_PCRE16_LIBRARY)
ENDIF()
SET(HAVE_PCRE ${PCRE_FOUND})

IF(NOT PCRE_FOUND)
	# PCRE wasn't found.
	# Use the internal PCRE.
	# TODO: Allow 8-bit PCRE to be disabled.
	# Currently, HAVE_PCRE is used as a general "PCRE is present" flag.
	SET(USE_INTERNAL_PCRE 1)
	SET(PCRE_FOUND 1)
	SET(PCRE_PCRE_LIBRARY pcre)
	SET(PCRE_PCRE16_LIBRARY pcre16)
	SET(HAVE_PCRE 1)
	SET(HAVE_PCRE16 1)
	SET(PCRE_STATIC 1)
	SET(PCRE_DEFINITIONS ${PCRE_DEFINITIONS} -DPCRE_STATIC)
	SET(PCRE_INCLUDE_DIR
		"${CMAKE_SOURCE_DIR}/extlib/pcre/"
		"${CMAKE_BINARY_DIR}/extlib/pcre/"
		)
ENDIF(NOT PCRE_FOUND)

ENDIF(NOT HAVE_PCRE)
